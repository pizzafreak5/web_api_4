{
	"id": "72392a1f-7c8b-61db-20a1-09000079244c",
	"name": "Homework4",
	"description": "",
	"order": [
		"83f827fc-fa77-8311-2708-15112044a006",
		"7caf3608-7a55-7951-c11e-578e2fb53ecb",
		"e7e2fc23-b700-c64c-7288-90587823f07d",
		"dfc3194b-b258-b477-97d0-5473eefa51b8"
	],
	"folders": [],
	"timestamp": 1460239481652,
	"owner": "",
	"remoteLink": "",
	"public": false,
	"requests": [
		{
			"id": "7caf3608-7a55-7951-c11e-578e2fb53ecb",
			"headers": "",
			"url": "http://garrettschwartz-test.apigee.net/webapi_4/find?title_specific=t&title=Deadpool",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "72392a1f-7c8b-61db-20a1-09000079244c",
			"data": null,
			"dataMode": "params",
			"name": "Specific Title Search",
			"description": "Specific title returns info from a movie where the movie's title maches the qeuried title exactly",
			"descriptionFormat": "html",
			"time": 1460239481652,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Deadpool info\"] = responseBody.has(\"Title: Deadpool\\nYear: 2016\\nActors: \\nRyan Reynolds\\nKaran Soni\\nEd Skrein\");",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "83f827fc-fa77-8311-2708-15112044a006",
			"headers": "",
			"url": "http://garrettschwartz-test.apigee.net/webapi_4/find?title_specific=f&title=Dead Book",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Deadpool present\"] = responseBody.has(\"Deadpool\");\ntests[\"Book of Eli present\"] = responseBody.has(\"Book of Eli\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1460240424502,
			"name": "Non-specific-search",
			"description": "Non-title-specific search can be used to search for partial terms or to get lists of movies",
			"collectionId": "72392a1f-7c8b-61db-20a1-09000079244c",
			"responses": []
		},
		{
			"id": "dfc3194b-b258-b477-97d0-5473eefa51b8",
			"headers": "",
			"url": "http://garrettschwartz-test.apigee.net/webapi_4/remove?title=Serenity",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"tests": "var jsonData = JSON.parse(responseBody);\ntests[\"Movie deleted\"] = (Object.keys(jsonData.entities).length > 0); \ntests[\"No movie\"] = (Object.keys(jsonData.entities).length === 0); ",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1460243337965,
			"name": "Remove entry",
			"description": "The remove delete request will remove the movie with the exact title specified in the query from the database (In this case, Serenity).",
			"collectionId": "72392a1f-7c8b-61db-20a1-09000079244c",
			"responses": []
		},
		{
			"id": "e7e2fc23-b700-c64c-7288-90587823f07d",
			"headers": "Content-Type: application/json\n",
			"url": "http://garrettschwartz-test.apigee.net/webapi_4/add",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Added\"] = responseBody.has(\"uuid\");\ntests[\"Duplicate\"] = responseBody.has(\"Error, duplicate movie\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1460241904378,
			"name": "Add movie to database",
			"description": "The add request with take a json object in the body containing a title, year released, and array of 3 actors. The request will check for errors and missing elements, as well as duplicates",
			"collectionId": "72392a1f-7c8b-61db-20a1-09000079244c",
			"responses": [],
			"rawModeData": "{\r\n\t\"actors\": [\r\n    {\r\n      \"first_name\": \"Nathan\",\r\n      \"last_name\": \"Fillion\"\r\n    },\r\n    {\r\n      \"first_name\": \"Alan\",\r\n      \"last_name\": \"Tudyk\"\r\n    },\r\n    {\r\n      \"first_name\": \"Jewel\",\r\n      \"last_name\": \"Staite\"\r\n    }\r\n  ],\r\n  \"title\": \"Serenity\",\r\n  \"year_released\": \"2005\"\r\n}\r\n\r\n"
		}
	]
}